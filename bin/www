#!/usr/bin/env node

/**
 * Module dependencies.
 */
const cluster = require('cluster');
const app = require('../app');
const debug = require('debug')('netmglab:server');
const http = require('http');
const mongoose = require('mongoose');
const config = require('../config');
const snmpMultiServer = require('../lib/snmp-multiagent');
const numCPUs = require('os').cpus().length;
const userSchema = require('../models/user');//First check in db if exists Admin
const bcrypt = require('bcryptjs');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
//server.on('error', onError);
//server.on('listening', onListening);
if (cluster.isMaster) {

  //We are the master
  console.log('Configurando sistema.......');
  console.log('Environment: ' + process.env.NODE_ENV);

  if (process.env.NODE_ENV === 'production') {
    console.info("PRODUCTION MODE");
  } else {
    console.log('debug', "DEVELOPMENT MODE");
  }
  //Check if the admin user exists in the database
  mongoose.connect(config.db.uri);
  mongoose.connection.once('connected', function () {
    checkAdmin();
  });
  for (var i = 0; i < numCPUs; i++) {
    var worker = cluster.fork();
    cluster.on('exit', function (worker, code, signal) {
      //If a child dies spawn another
      console.log("Error: " + code)
      worker = cluster.fork();
    });
  }
  snmpMultiServer.init();
} else {
  snmpMultiServer.init();
  var db = mongoose.connect(config.db.uri);
  mongoose.connection.once('connected', function () {
    //Each child connects to mongo and reuses the connection
    console.log('New worker: ' + process.pid);
    console.log("Connected to database");
    server = http.createServer(app);
    server.listen(port);
    server.on('error', onError);
  });

}
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
/**
 * Check if exists the Admin user in the database
 * 
 */
function checkAdmin() {
  //Default Admin name : Admin
  userSchema.findOne({ 'local.name': 'Admin' }, (err, doc) => {
    if (err || !doc) {
      //Not exists -> Create new Admin user
      bcrypt.hash('Admin', 10).then(function (hash) {
        var adminUser = new userSchema({
          local: {
            username: 'Admin',
            password: hash
          },
          info: {
            state: 'active'
          },
          profile: {
            photo: '',
            nickName: 'Admin'
          },
          rol : 'admin'
        });
        adminUser.save((err) => {
          if(err){
            console.log('Error saving new Admin');
            console.log(err);
          }
        });
      });
    }else{
      console.log('Admin exists');
    }
  });
}